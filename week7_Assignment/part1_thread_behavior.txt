In this part of the assignment, I observed how threads work together in the producer-consumer program. The output is not always the same every time I run the program. Sometimes the consumer reads values before they are fully added by the producer, and the order of execution changes. This happens because the operating system controls when each thread runs, so they don't always work in the same order. This makes the program behave differently each time. I expected this inconsistency because multiple threads are running at the same time, and without proper control, they can overlap in their work. To avoid this problem, we can use tools like mutexes, which allow only one thread to access the shared buffer at a time. Condition variables also help by making threads wait until the right conditions are met, like when the buffer has space or items to consume. These techniques can help make the program work more smoothly without errors.
